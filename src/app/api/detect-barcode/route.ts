// ./src/app/api/detect-barcode/route.ts
import { NextRequest, NextResponse } from "next/server";

const PYTHON_BACKEND_URL =
  process.env.PYTHON_BACKEND_URL ||
  "https://fndt-stock-count-backend-ver-1-554640844166.asia-southeast1.run.app";

// Define proper types instead of using 'any'
interface BarcodeDetection {
  format: string;
  data: string;
  position?: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
  confidence?: number;
}

interface BarcodeResult {
  barcode: string;
  format: string;
  confidence?: number;
  data?: string;
}

interface PythonBackendResponse {
  success: boolean;
  detections?: BarcodeDetection[];
  results?: BarcodeResult[];
  barcodes?: BarcodeResult[];
  confidence?: number;
  rotation_angle?: number;
  decode_method?: string;
  barcodes_found?: number;
  error?: string;
}

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ API route called");

    const formData = await request.formData();
    const imageFile = formData.get("image") as File;

    if (!imageFile) {
      console.log("‚ùå No image file found");
      return NextResponse.json(
        {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
        },
        { status: 400 }
      );
    }

    console.log(
      "üìÅ Image file received:",
      imageFile.name,
      imageFile.size,
      "bytes"
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend URL
    const backendUrl = PYTHON_BACKEND_URL;
    console.log("üîó Backend URL:", backendUrl);

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Python backend
      const pythonFormData = new FormData();
      pythonFormData.append("image", imageFile); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "file" ‡πÄ‡∏õ‡πá‡∏ô "image"

      console.log("üì§ Sending to Python backend...");

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Flask ‡∏´‡∏£‡∏∑‡∏≠ FastAPI
      // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Flask endpoint ‡∏Å‡πà‡∏≠‡∏ô
      let pythonResponse: Response;
      let endpoint = "/api/detect-barcode"; // Flask endpoint

      try {
        console.log(`üîÑ Trying Flask endpoint: ${endpoint}`);
        pythonResponse = await fetch(`${backendUrl}${endpoint}`, {
          method: "POST",
          body: pythonFormData,
        });

        if (!pythonResponse.ok) {
          throw new Error(`Flask backend error: ${pythonResponse.status}`);
        }
      } catch (flaskError) {
        console.log("‚ö†Ô∏è Flask endpoint failed, trying FastAPI...", flaskError);
        // ‡∏ñ‡πâ‡∏≤ Flask ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á FastAPI
        endpoint = "/scan-file"; // FastAPI endpoint
        pythonFormData.delete("image");
        pythonFormData.append("file", imageFile); // FastAPI ‡πÉ‡∏ä‡πâ "file"

        pythonResponse = await fetch(`${backendUrl}${endpoint}`, {
          method: "POST",
          body: pythonFormData,
        });

        if (!pythonResponse.ok) {
          const errorText = await pythonResponse.text();
          console.log("‚ùå Both backends failed:", errorText);
          throw new Error(`Both backends failed: ${pythonResponse.status}`);
        }
      }

      console.log("üì• Python backend response status:", pythonResponse.status);

      const result: PythonBackendResponse = await pythonResponse.json();
      console.log("‚úÖ Python backend result:", result);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö format ‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const response = {
        success: result.success || false,
        detections: result.detections || [],
        barcodes: result.results || result.barcodes || [],
        confidence: result.confidence || 0,
        rotation_angle: result.rotation_angle || 0,
        decode_method: result.decode_method || "unknown",
        barcodes_found: result.barcodes_found || 0,
        error: result.error,
      };

      return NextResponse.json(response);
    } catch (error) {
      console.error("‚ùå Error calling Python backend:", error);
      return NextResponse.json(
        {
          success: false,
          error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Python backend",
          details: error instanceof Error ? error.message : "Unknown error",
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("‚ùå Unexpected error:", error);
    return NextResponse.json(
      {
        success: false,
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
